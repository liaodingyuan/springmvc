/**
 * 
 */
/**
 * <p>
 * Title:package-info
 * </p>
 * <p>
 * Description: 代理模式分为静态代理和动态代理。 代理对象可以在客户端和目标对象之间起到中介作用，并可以通过代理对象隐藏不想让客户看到的部分。
 * 或者为客户添加额外的服务。既功能增强。<br/>
 * 最经典的代理是网络代理。 *
 * </p>
 * <p>
 * Company:
 * </p>
 * 
 * @author liaody
 * @date 2017年8月1日
 */
package basecc.pattern.proxy;

// 使用代理模式的三种最经典的应用，延时加载（确实需要对象的时候才会去创建），隐藏功能，增强功能，不过使用代理模式去增强功能的时候。简而言之就是控制对象的访问
// 考虑一下是否应该使用装饰模式。

/**
 * 代理模式: 为其他对象提供一种代理，并以控制对这个对象的访问。（Provide asurrogate or placeholder foranother
 * object tocontrol access to it.
 * ）而对一个对象进行访问控制的一个原因是为了只有在我们确实需要这个对象时才对它进行创建和初始化。它是给某一个对象提供一个替代者(占位者),使之在client对象和subject对象之间编码更有效率。代理可以提供延迟实例化(lazy
 * instantiation),控制访问, 等等，包括只在调用中传递。 一个处理纯本地资源的代理有时被称作虚拟代理。远程服务的代理常常称为远程代理。强制
 * 控制访问的代理称为保护代理。
 */
